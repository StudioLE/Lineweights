name: CI/CD
on:
  push:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  CARGO_TERM_COLOR: always
  NAME: lineweights
jobs:

  release:
    name: Determine Version
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Run Surveyor
      id: release
      env:
        GH_TOKEN: ${{ secrets.SURVEYOR_TOKEN }}
        SURVEYOR_VERSION: v0.7.2
      run: |
        SURVEYOR="${{ runner.temp }}/surveyor"
        gh release download "${SURVEYOR_VERSION}" \
          --repo StudioLE/Surveyor \
          --pattern "Surveyor-linux-x64-${SURVEYOR_VERSION}" \
          --output "${SURVEYOR}"
        chmod +x "${SURVEYOR}"
        VERSION=$("${SURVEYOR}" version)
        "${SURVEYOR}" release-notes > "${{ runner.temp }}/release-notes.md"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "${VERSION}"

    - run: echo "# ${{ steps.release.outputs.version}}" >> $GITHUB_STEP_SUMMARY

    - run: cat ${{ runner.temp }}/release-notes.md >> $GITHUB_STEP_SUMMARY

    - uses: actions/upload-artifact@v4
      with:
        name: release-notes.md
        path: ${{ runner.temp }}/release-notes.md

    - run: /home/linuxbrew/.linuxbrew/bin/brew install cargo-edit
      if: steps.release.outputs.version != ''

    - run: /home/linuxbrew/.linuxbrew/bin/cargo-set-version set-version ${{ steps.release.outputs.version }}
      if: steps.release.outputs.version != ''

    - run: git --no-pager diff --color

    - uses: actions/upload-artifact@v4
      with:
        name: Cargo.toml
        path: Cargo.toml


  build:
    name: Build
    runs-on: ubuntu-24.04
    needs:
    - release
    steps:

    - name: Fetch dependencies
      run: sudo apt-get update

    - name: Install dependencies
      run: >
        sudo apt-get install --yes
        libwebkit2gtk-4.1-dev
        build-essential
        curl
        wget
        file
        libxdo-dev
        libssl-dev
        libayatana-appindicator3-dev
        librsvg2-dev

    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Restore Cargo
      id: cargo-cache
      uses: actions/cache/restore@v4
      with:
        key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{ needs.release.outputs.version }}
        restore-keys: |
          cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-
          cargo-${{ runner.os }}-
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/

    - uses: actions/download-artifact@v4
      with:
        name: Cargo.toml

    - name: WASM target
      run: rustup target add wasm32-unknown-unknown

    - name: Install Cargo BInstall
      run: /home/linuxbrew/.linuxbrew/bin/brew install cargo-binstall

    - name: Install Dioxus CLI
      run: cargo binstall dioxus-cli

    - name: Build dependencies
      run: npm install

    - name: Bundle for Web
      run: dx bundle --platform web

    - name: Cache Cargo
      if: always()
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.cargo-cache.outputs.cache-primary-key }}
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/

    - name: Git Config
      run: |
        git config user.name "CI/CD"
        git config user.email "cicd.tbxeq@passmail.com"

    - name: Cargo Format
      run: |
        cargo fmt
        git add --all -- ':!Cargo.toml' ':!Cargo.lock'
        if ! git diff --cached --exit-code
        then
          echo "::warning title=Cargo Format::Please review the output for details."
          git commit -m "style: Apply code style with \`cargo fmt\`"
        fi
      continue-on-error: true

    - name: Cargo Fix
      run: |
        cargo fix --release --allow-dirty --message-format short
        cargo fmt
        git add --all -- ':!Cargo.toml' ':!Cargo.lock'
        if ! git diff --cached --exit-code
        then
          echo "::warning title=Cargo Fix::Please review the output for details."
          git commit -m "style: Apply code style with \`cargo fix\`"
        fi
      continue-on-error: true

    - name: Cargo Clippy
      run: |
        cargo clippy --release --fix --allow-dirty --message-format short
        cargo fmt
        git add --all -- ':!Cargo.toml' ':!Cargo.lock'
        if ! git diff --cached --exit-code
        then
          echo "::warning title=Cargo Clippy::Please review the output for details."
          git commit -m "style: Apply code style with \`cargo clippy --fix\`"
        fi
      continue-on-error: true

    - name: Git Status
      run: git status

    - name: Git Push
      run: git push

    - name: Artifact name
      id: artifact
      run: |
        ARTIFACT="${{ env.NAME }}-${{ needs.release.outputs.version }}-wasm32"
        echo "name=${ARTIFACT}" >> $GITHUB_OUTPUT

    - name: Copy WebAssembly
      run: cp -r target/dx/${{ env.NAME }}/release/web/public ${{ steps.artifact.outputs.name }}

    - name: Create archive
      run: >
        7z a
        ${{ steps.artifact.outputs.name }}.7z
        ${{ steps.artifact.outputs.name }}

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact.outputs.name }}
        path: ${{ steps.artifact.outputs.name }}.7z


  git-tag:
    name: Tag
    runs-on: ubuntu-24.04
    if: needs.release.outputs.version != '' && contains(needs.release.outputs.version, '-')
    needs:
    - release
    - build
    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: git config
      run: |
        git config user.name "CI/CD"
        git config user.email "cicd.tbxeq@passmail.com"

    - name: git tag
      run: git tag "v${{ needs.release.outputs.version }}"

    - name: git push
      run: git push origin "v${{ needs.release.outputs.version }}"


  github-release:
    name: Release
    runs-on: ubuntu-24.04
    if: needs.release.outputs.version != '' && ! contains(needs.release.outputs.version, '-')
    needs:
    - release
    - build
    steps:

    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: release-notes.md

    - name: Create Release
      if: needs.release.outputs.version != '' && ! contains(needs.release.outputs.version, '-')
      env:
        GH_TOKEN: ${{ github.token }}
      run: >
        gh release create
        "v${{ needs.release.outputs.version }}"
        --title "v${{ needs.release.outputs.version }}"
        --notes-file "release-notes.md"
        --target ${{ github.ref_name }}

    - name: Create Prerelease
      if: needs.release.outputs.version != '' && contains(needs.release.outputs.version, '-')
      env:
        GH_TOKEN: ${{ github.token }}
      run: >
        gh release create
        "v${{ needs.release.outputs.version }}"
        --title "v${{ needs.release.outputs.version }}"
        --notes-file "release-notes.md"
        --target ${{ github.ref_name }}
        --prerelease

    - uses: actions/download-artifact@v4
      with:
        pattern: ${{ env.NAME }}-${{ needs.release.outputs.version }}-*
        merge-multiple: true

    - name: Upload Release Asset
      if: needs.release.outputs.version != ''
      env:
        GH_TOKEN: ${{ github.token }}
      run: >
        gh release upload
        v${{ needs.release.outputs.version }}
        ${{ env.NAME }}-${{ needs.release.outputs.version }}-*
        --clobber
        --repo "${{ github.repository }}"


  push-webassembly:
    name: Push WebAssembly
    runs-on: ubuntu-24.04
    if: needs.release.outputs.version != '' && ! contains(needs.release.outputs.version, '-')
    needs:
    - release
    - build
    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: StudioLE/LineweightsWeb
        token: ${{ secrets.WEB_REPO_TOKEN }}

    - name: Remove latest
      continue-on-error: true
      run: rm -rf latest

    - name: Download archive
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.NAME }}-${{ needs.release.outputs.version }}-wasm32
        path: artifacts

    - name: Extract archive
      run: 7z e artifacts/*.7z -olatest

    - name: Remove archive
      run: rm artifacts/*.7z

    - name: List
      run: ls -R1 latest

    - name: Copy
      run: cp -r latest v${{ needs.release.outputs.version }}

    - name: Commit
      run: |
        git config user.name "CI/CD"
        git config user.email "cicd.tbxeq@passmail.com"
        git add --all
        git commit --allow-empty -m "feat: Added ${{ needs.release.outputs.version }} WebAssembly build"

    - name: Status
      run: git status

    - name: Push
      run: git push